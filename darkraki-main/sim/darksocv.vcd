$date
	Wed Oct  2 11:19:11 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module darksimv $end
$var wire 1 ! RX $end
$var wire 1 " TX $end
$var reg 1 # CLK $end
$var reg 1 $ RES $end
$var integer 32 % a [31:0] $end
$scope module soc0 $end
$var wire 1 & DEBUG $end
$var wire 1 ! UART_RXD $end
$var wire 1 " UART_TXD $end
$var wire 1 # iCLK $end
$var wire 32 ' iRAM_DATA [31:0] $end
$var wire 32 ( iROM_DATA [31:0] $end
$var wire 1 ) iRST $end
$var wire 32 * oREG32 [31:0] $end
$var wire 1 + ram_rd $end
$var wire 1 , ram_wr $end
$var wire 1 - rom_ce $end
$var wire 1 . rom_rd $end
$var wire 32 / rom_data [31:0] $end
$var wire 32 0 rom_address [31:0] $end
$var wire 32 1 ram_write_data [31:0] $end
$var wire 32 2 ram_read_data [31:0] $end
$var wire 1 3 ram_ce $end
$var wire 32 4 ram_address [31:0] $end
$var wire 1 5 irq $end
$var wire 1 6 finishreq $end
$var wire 32 7 datao [31:0] $end
$scope module core0 $end
$var wire 1 8 a_ram_ce $end
$var wire 32 9 a_ram_data_write [31:0] $end
$var wire 1 : a_ram_rd $end
$var wire 1 ; a_ram_wr $end
$var wire 1 < b_ram_ce $end
$var wire 1 = b_ram_rd $end
$var wire 1 > b_ram_wr $end
$var wire 32 ? c_ram_address [31:0] $end
$var wire 1 @ c_ram_ce $end
$var wire 32 A c_ram_data_write [31:0] $end
$var wire 1 B c_ram_rd $end
$var wire 1 C c_ram_wr $end
$var wire 5 D c_rd [4:0] $end
$var wire 32 E c_reg_in [31:0] $end
$var wire 5 F e_rd [4:0] $end
$var wire 32 G e_reg_in [31:0] $end
$var wire 1 # iCLK $end
$var wire 1 ) iRST $end
$var wire 32 H ir [31:0] $end
$var wire 1 + oRAM_RD $end
$var wire 1 , oRAM_WR $end
$var wire 32 I oROM_ADDR [31:0] $end
$var wire 1 - oROM_CE $end
$var wire 1 . oROM_RD $end
$var wire 5 J x_rs2 [4:0] $end
$var wire 5 K x_rs1 [4:0] $end
$var wire 32 L x_reg_out2 [31:0] $end
$var wire 32 M x_reg_out1 [31:0] $end
$var wire 32 N x_reg_in [31:0] $end
$var wire 5 O x_rd [4:0] $end
$var wire 1 P ram_wr $end
$var wire 1 Q ram_rd $end
$var wire 32 R pcbr_type_j [31:0] $end
$var wire 32 S pcbr_type_i [31:0] $end
$var wire 32 T pcbr_type_b [31:0] $end
$var wire 32 U pc [31:0] $end
$var wire 7 V opcode [6:0] $end
$var wire 32 W oRAM_DATA [31:0] $end
$var wire 1 3 oRAM_CE $end
$var wire 32 X oRAM_ADDR [31:0] $end
$var wire 32 Y iROM_DATA [31:0] $end
$var wire 32 Z iRAM_DATA [31:0] $end
$var wire 32 [ f_reg_in [31:0] $end
$var wire 5 \ f_rd [4:0] $end
$var wire 5 ] e_rs2 [4:0] $end
$var wire 5 ^ e_rs1 [4:0] $end
$var wire 32 _ e_reg_out2 [31:0] $end
$var wire 32 ` e_reg_out1 [31:0] $end
$var wire 32 a d_reg_out2 [31:0] $end
$var wire 32 b d_reg_out1 [31:0] $end
$var wire 32 c d_reg_in [31:0] $end
$var wire 5 d d_rd [4:0] $end
$var wire 5 e c_rs2 [4:0] $end
$var wire 5 f c_rs1 [4:0] $end
$var wire 32 g c_reg_out2 [31:0] $end
$var wire 32 h c_reg_out1 [31:0] $end
$var wire 32 i c_ram_data_read [31:0] $end
$var wire 5 j b_rs1 [4:0] $end
$var wire 32 k b_reg_out1 [31:0] $end
$var wire 32 l b_reg_in [31:0] $end
$var wire 5 m b_rd [4:0] $end
$var wire 32 n b_ram_data_write [31:0] $end
$var wire 32 o b_ram_data_read [31:0] $end
$var wire 32 p b_ram_address [31:0] $end
$var wire 5 q a_rs2 [4:0] $end
$var wire 5 r a_rs1 [4:0] $end
$var wire 32 s a_reg_out2 [31:0] $end
$var wire 32 t a_reg_out1 [31:0] $end
$var wire 32 u a_reg_in [31:0] $end
$var wire 5 v a_rd [4:0] $end
$var wire 32 w a_ram_data_read [31:0] $end
$var wire 32 x a_ram_address [31:0] $end
$var integer 32 y counter [31:0] $end
$scope module u1 $end
$var wire 1 # iCLK $end
$var wire 7 z iOpcode [6:0] $end
$var wire 1 ) iRST $end
$var wire 32 { oPC [31:0] $end
$var wire 32 | pcbranch [31:0] $end
$var wire 32 } pc_next [31:0] $end
$var wire 32 ~ iPCBR_J [31:0] $end
$var wire 32 !" iPCBR_I [31:0] $end
$var wire 32 "" iPCBR_B [31:0] $end
$var reg 32 #" pc [31:0] $end
$upscope $end
$scope module u10 $end
$var wire 1 # iCLK $end
$var wire 32 $" iIR [31:0] $end
$var wire 32 %" iPC [31:0] $end
$var wire 32 &" oREG_IN [31:0] $end
$var wire 7 '" opcode [6:0] $end
$var wire 5 (" oRD [4:0] $end
$var wire 32 )" oPCBR [31:0] $end
$var wire 8 *" imm20d [7:0] $end
$var wire 1 +" imm20c $end
$var wire 10 ," imm20b [9:0] $end
$var wire 1 -" imm20a $end
$var wire 32 ." imm20 [31:0] $end
$var wire 32 /" alu_out [31:0] $end
$upscope $end
$scope module u2 $end
$var wire 1 # iCLK $end
$var wire 1 ) iRST $end
$var wire 32 0" oREG_OUT1 [31:0] $end
$var wire 32 1" oREG_OUT2 [31:0] $end
$var wire 5 2" iRS2 [4:0] $end
$var wire 5 3" iRS1 [4:0] $end
$var wire 32 4" iREG_IN [31:0] $end
$var wire 5 5" iRD [4:0] $end
$var integer 32 6" counter [31:0] $end
$var integer 32 7" i [31:0] $end
$upscope $end
$scope module u3 $end
$var wire 1 # CLK $end
$var wire 7 8" iOpcode [6:0] $end
$var wire 5 9" i_B_RS2 [4:0] $end
$var wire 5 :" i_C_RD [4:0] $end
$var wire 32 ;" i_C_REG_IN [31:0] $end
$var wire 5 <" i_D_RS1 [4:0] $end
$var wire 5 =" i_D_RS2 [4:0] $end
$var wire 5 >" i_E_RD [4:0] $end
$var wire 32 ?" i_E_REG_IN [31:0] $end
$var wire 5 @" i_E_RS1 [4:0] $end
$var wire 5 A" i_E_RS2 [4:0] $end
$var wire 5 B" i_F_RD [4:0] $end
$var wire 32 C" i_F_REG_IN [31:0] $end
$var wire 5 D" i_F_RS1 [4:0] $end
$var wire 5 E" i_F_RS2 [4:0] $end
$var wire 32 F" i_X_REG_OUT1 [31:0] $end
$var wire 32 G" i_X_REG_OUT2 [31:0] $end
$var wire 5 H" o_X_RS2 [4:0] $end
$var wire 5 I" o_X_RS1 [4:0] $end
$var wire 32 J" o_X_REG_IN [31:0] $end
$var wire 5 K" o_X_RD [4:0] $end
$var wire 32 L" o_F_REG_OUT2 [31:0] $end
$var wire 32 M" o_F_REG_OUT1 [31:0] $end
$var wire 32 N" o_E_REG_OUT2 [31:0] $end
$var wire 32 O" o_E_REG_OUT1 [31:0] $end
$var wire 32 P" o_D_REG_OUT2 [31:0] $end
$var wire 32 Q" o_D_REG_OUT1 [31:0] $end
$var wire 32 R" o_C_REG_OUT2 [31:0] $end
$var wire 32 S" o_C_REG_OUT1 [31:0] $end
$var wire 32 T" o_B_REG_OUT2 [31:0] $end
$var wire 32 U" o_B_REG_OUT1 [31:0] $end
$var wire 32 V" o_A_REG_OUT2 [31:0] $end
$var wire 32 W" o_A_REG_OUT1 [31:0] $end
$var wire 32 X" i_D_REG_IN [31:0] $end
$var wire 5 Y" i_D_RD [4:0] $end
$var wire 5 Z" i_C_RS2 [4:0] $end
$var wire 5 [" i_C_RS1 [4:0] $end
$var wire 5 \" i_B_RS1 [4:0] $end
$var wire 32 ]" i_B_REG_IN [31:0] $end
$var wire 5 ^" i_B_RD [4:0] $end
$var wire 5 _" i_A_RS2 [4:0] $end
$var wire 5 `" i_A_RS1 [4:0] $end
$var wire 32 a" i_A_REG_IN [31:0] $end
$var wire 5 b" i_A_RD [4:0] $end
$upscope $end
$scope module u4 $end
$var wire 1 # CLK $end
$var wire 1 P RAM_WR $end
$var wire 7 c" iOpcode [6:0] $end
$var wire 1 8 i_A_RAM_CE $end
$var wire 32 d" i_A_RAM_DATA_WR [31:0] $end
$var wire 1 : i_A_RAM_RD $end
$var wire 1 ; i_A_RAM_WR $end
$var wire 1 < i_B_RAM_CE $end
$var wire 1 = i_B_RAM_RD $end
$var wire 1 > i_B_RAM_WR $end
$var wire 32 e" i_C_RAM_ADDR [31:0] $end
$var wire 1 @ i_C_RAM_CE $end
$var wire 32 f" i_C_RAM_DATA_WR [31:0] $end
$var wire 1 B i_C_RAM_RD $end
$var wire 1 C i_C_RAM_WR $end
$var wire 1 3 o_X_RAM_CE $end
$var wire 1 + o_X_RAM_RD $end
$var wire 1 , o_X_RAM_WR $end
$var wire 32 g" o_X_RAM_DATA_WR [31:0] $end
$var wire 32 h" o_X_RAM_ADDR [31:0] $end
$var wire 32 i" o_C_RAM_DATA_RD [31:0] $end
$var wire 32 j" o_B_RAM_DATA_RD [31:0] $end
$var wire 32 k" o_A_RAM_DATA_RD [31:0] $end
$var wire 32 l" i_X_RAM_DATA_RD [31:0] $end
$var wire 32 m" i_B_RAM_DATA_WR [31:0] $end
$var wire 32 n" i_B_RAM_ADDR [31:0] $end
$var wire 32 o" i_A_RAM_ADDR [31:0] $end
$var wire 1 Q RAM_RD $end
$upscope $end
$scope module u5 $end
$var wire 32 p" alu_in1 [31:0] $end
$var wire 32 q" alu_in2 [31:0] $end
$var wire 1 # iCLK $end
$var wire 32 r" iIR [31:0] $end
$var wire 32 s" iREG_OUT1 [31:0] $end
$var wire 32 t" iREG_OUT2 [31:0] $end
$var wire 32 u" oREG_IN [31:0] $end
$var wire 5 v" oRS2 [4:0] $end
$var wire 5 w" oRS1 [4:0] $end
$var wire 5 x" oRD [4:0] $end
$var wire 7 y" func7 [6:0] $end
$var wire 10 z" func37 [9:0] $end
$var wire 3 {" func3 [2:0] $end
$var wire 32 |" alu_out [31:0] $end
$upscope $end
$scope module u6 $end
$var wire 32 }" alu_in1 [31:0] $end
$var wire 1 # iCLK $end
$var wire 32 ~" iIR [31:0] $end
$var wire 32 !# iPC [31:0] $end
$var wire 32 "# iRAM_DATA [31:0] $end
$var wire 32 ## iREG_OUT1 [31:0] $end
$var wire 32 $# oRAM_ADDR [31:0] $end
$var wire 1 8 oRAM_CE $end
$var wire 1 : oRAM_RD $end
$var wire 1 ; oRAM_WR $end
$var wire 32 %# ram_data [31:0] $end
$var wire 16 &# ram_data_half [15:0] $end
$var wire 8 '# ram_data_byte [7:0] $end
$var wire 32 (# ram_address [31:0] $end
$var wire 7 )# opcode [6:0] $end
$var wire 5 *# oRS1 [4:0] $end
$var wire 32 +# oREG_IN [31:0] $end
$var wire 5 ,# oRD [4:0] $end
$var wire 32 -# oPCBR [31:0] $end
$var wire 12 .# imm12 [11:0] $end
$var wire 3 /# func3 [2:0] $end
$var wire 32 0# alu_out_i3 [31:0] $end
$var wire 32 1# alu_out_i2 [31:0] $end
$var wire 32 2# alu_out_i1 [31:0] $end
$var wire 32 3# alu_in2 [31:0] $end
$upscope $end
$scope module u7 $end
$var wire 32 4# alu_in1 [31:0] $end
$var wire 32 5# alu_in2 [31:0] $end
$var wire 1 # iCLK $end
$var wire 32 6# iIR [31:0] $end
$var wire 32 7# iRAM_DATA [31:0] $end
$var wire 32 8# iREG_OUT1 [31:0] $end
$var wire 32 9# iREG_OUT2 [31:0] $end
$var wire 32 :# oRAM_ADDR [31:0] $end
$var wire 1 < oRAM_CE $end
$var wire 1 > oRAM_WR $end
$var wire 5 ;# oRD [4:0] $end
$var wire 32 <# oREG_IN [31:0] $end
$var wire 32 =# ram_data_rd [31:0] $end
$var wire 32 ># ram_data_word_wr [31:0] $end
$var wire 32 ?# ram_data_half_wr [31:0] $end
$var wire 32 @# ram_data_byte_wr [31:0] $end
$var wire 32 A# ram_address [31:0] $end
$var wire 5 B# oRS2 [4:0] $end
$var wire 5 C# oRS1 [4:0] $end
$var wire 32 D# oRAM_DATA [31:0] $end
$var wire 7 E# imm7 [6:0] $end
$var wire 5 F# imm5 [4:0] $end
$var wire 12 G# imm12 [11:0] $end
$var wire 3 H# func3 [2:0] $end
$upscope $end
$scope module u8 $end
$var wire 1 # iCLK $end
$var wire 32 I# iIR [31:0] $end
$var wire 32 J# iPC [31:0] $end
$var wire 32 K# iRAM_DATA [31:0] $end
$var wire 32 L# oRAM_ADDR [31:0] $end
$var wire 1 @ oRAM_CE $end
$var wire 32 M# oRAM_DATA [31:0] $end
$var wire 1 C oRAM_WR $end
$var wire 32 N# oREG_IN [31:0] $end
$var wire 7 O# opcode [6:0] $end
$var wire 5 P# oRD [4:0] $end
$var wire 20 Q# imm20 [19:0] $end
$var wire 32 R# alu_out [31:0] $end
$upscope $end
$scope module u9 $end
$var wire 32 S# alu_in1 [31:0] $end
$var wire 32 T# alu_in2 [31:0] $end
$var wire 1 # iCLK $end
$var wire 32 U# iIR [31:0] $end
$var wire 32 V# iREG_OUT1 [31:0] $end
$var wire 32 W# iREG_OUT2 [31:0] $end
$var wire 32 X# oPCBR [31:0] $end
$var wire 5 Y# oRS2 [4:0] $end
$var wire 5 Z# oRS1 [4:0] $end
$var wire 7 [# imm7 [6:0] $end
$var wire 5 \# imm5 [4:0] $end
$var wire 32 ]# imm12 [31:0] $end
$var wire 3 ^# func3 [2:0] $end
$var wire 32 _# alu_out [31:0] $end
$upscope $end
$upscope $end
$scope module u1 $end
$var wire 32 `# iROM_ADDR [31:0] $end
$var wire 1 - iROM_CE $end
$var wire 1 # iROM_CLK $end
$var wire 1 . iROM_RD $end
$var wire 32 a# tmp_data [31:0] $end
$var wire 32 b# tmp_addr [31:0] $end
$var wire 32 c# oROM_DATA [31:0] $end
$var wire 1 d# is_mem_valid $end
$upscope $end
$scope module u11 $end
$var wire 4 e# BE [3:0] $end
$var wire 1 # CLK $end
$var wire 1 . RD $end
$var wire 1 ) RES $end
$var wire 1 ! RXD $end
$var wire 1 " TXD $end
$var wire 1 , WR $end
$var wire 8 f# UART_STATE [7:0] $end
$var wire 1 5 IRQ $end
$var wire 4 g# DEBUG [3:0] $end
$var wire 32 h# DATAO [31:0] $end
$var wire 32 i# DATAI [31:0] $end
$var reg 32 j# DATAOFF [31:0] $end
$var reg 1 6 FINISH_REQ $end
$var reg 2 k# IOACK [1:0] $end
$var reg 2 l# IOREQ [1:0] $end
$var reg 1 m# UART_IACK $end
$var reg 1 n# UART_IREQ $end
$var reg 1 o# UART_RACK $end
$var reg 16 p# UART_RBAUD [15:0] $end
$var reg 8 q# UART_RFIFO [7:0] $end
$var reg 1 r# UART_RREQ $end
$var reg 4 s# UART_RSTATE [3:0] $end
$var reg 3 t# UART_RXDFF [2:0] $end
$var reg 8 u# UART_STATEFF [7:0] $end
$var reg 16 v# UART_TIMER [15:0] $end
$var reg 1 w# UART_XACK $end
$var reg 16 x# UART_XBAUD [15:0] $end
$var reg 8 y# UART_XFIFO [7:0] $end
$var reg 1 z# UART_XREQ $end
$var reg 4 {# UART_XSTATE [3:0] $end
$upscope $end
$scope module u2 $end
$var wire 32 |# iRAM_ADDR [31:0] $end
$var wire 1 3 iRAM_CE $end
$var wire 1 # iRAM_CLK $end
$var wire 32 }# iRAM_DATA [31:0] $end
$var wire 1 + iRAM_RD $end
$var wire 1 ~# iRAM_RST $end
$var wire 1 , iRAM_WR $end
$var wire 32 !$ tmp_data [31:0] $end
$var wire 8 "$ tmp_addr [7:0] $end
$var wire 32 #$ oRAM_DATA [31:0] $end
$var wire 1 $$ is_mem_valid $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0$$
b0 #$
b11000000 "$
b0 !$
z~#
b0 }#
b0 |#
b0 {#
0z#
b0 y#
b0 x#
0w#
b1101100100 v#
b0 u#
b111 t#
b0 s#
0r#
b0 q#
b0 p#
0o#
0n#
0m#
b0 l#
b0 k#
b0 j#
b0 i#
b11011001000000000000000000 h#
b1111 g#
b0 f#
bz e#
1d#
b111000100000000000010100010011 c#
b0 b#
b111000100000000000010100010011 a#
b0 `#
b1110001010 _#
b0 ^#
b1110001010 ]#
b1010 \#
b11100 [#
b0 Z#
b1000 Y#
b1110001010 X#
b0 W#
b0 V#
b111000100000000000010100010011 U#
b0 T#
b0 S#
b0 R#
b111000100000000000 Q#
b1010 P#
b10011 O#
b0 N#
bz M#
bz L#
b0 K#
b0 J#
b111000100000000000010100010011 I#
b0 H#
b1110001010 G#
b1010 F#
b11100 E#
b0 D#
b0 C#
b1000 B#
b1110001010 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b1110001010 :#
b0 9#
b0 8#
b0 7#
b111000100000000000010100010011 6#
b0 5#
b0 4#
b1110001000 3#
b1110001000 2#
b0 1#
b100 0#
b0 /#
b1110001000 .#
b1110001000000000000000 -#
b1010 ,#
b1110001000 +#
b0 *#
b10011 )#
b1110001000 (#
b0 '#
b0 &#
b0 %#
b1110001000 $#
b0 ##
b0 "#
b0 !#
b111000100000000000010100010011 ~"
b0 }"
b0 |"
b0 {"
b11100 z"
b11100 y"
b1010 x"
b0 w"
b1000 v"
b0 u"
b0 t"
b0 s"
b111000100000000000010100010011 r"
b0 q"
b0 p"
b1110001000 o"
b1110001010 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
bz f"
bz e"
bz d"
b10011 c"
b1010 b"
b0 a"
b0 `"
b1000 _"
b1010 ^"
b1110001000 ]"
b0 \"
b0 ["
b1000 Z"
b1010 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b1010 K"
b1110001000 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b100 C"
b1010 B"
b0 A"
b0 @"
bz ?"
bz >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b10011 8"
b100000 7"
b0 6"
b1010 5"
b1110001000 4"
b0 3"
b0 2"
b0 1"
b0 0"
b100 /"
b1110001000 ."
0-"
b1010001001 ,"
0+"
b0 *"
b1110001000 )"
b1010 ("
b10011 '"
b100 &"
b0 %"
b111000100000000000010100010011 $"
b0 #"
b1110001010 ""
b1110001000000000000000 !"
b1110001000 ~
b100 }
b0 |
b0 {
b10011 z
b0 y
b1110001000 x
b0 w
b1010 v
b0 u
b0 t
b0 s
b0 r
b1000 q
b1110001010 p
b0 o
b0 n
b1010 m
b1110001000 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b1000 e
b1010 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b1000 ]
b1010 \
b100 [
b0 Z
b111000100000000000010100010011 Y
b0 X
b0 W
b10011 V
b0 U
b1110001010 T
b1110001000000000000000 S
b1110001000 R
0Q
1P
b1010 O
b1110001000 N
b0 M
b0 L
b0 K
b0 J
b0 I
b111000100000000000010100010011 H
bz G
bz F
b0 E
b0 D
zC
zB
bz A
z@
bz ?
1>
z=
1<
0;
1:
bz 9
18
b11011001000000000000000000 7
06
05
b0 4
13
b0 2
b0 1
b0 0
b111000100000000000010100010011 /
1.
1-
1,
x+
bz *
1)
bz (
bz '
z&
b0 %
1$
0#
1"
1!
$end
#1
b1000 N
b1000 4"
b1000 J"
b0 O
b0 5"
b0 K"
b1 K
b1 3"
b1 I"
b0 T
b0 ""
b0 X#
b0 _#
b100 |
b1000 l
b1000 ]"
b1000 +#
b0 2#
b1100111 V
b1100111 z
b1100111 8"
b1100111 c"
b1100111 '"
b0 \
b0 ("
b0 B"
b110011 ,"
b1000 *"
b1000000000000000 ."
b0 v
b0 b"
b0 x"
b1 r
b1 `"
b1 w"
b0 q
b0 _"
b0 v"
b0 z"
b0 y"
b1100111 )#
b0 m
b0 ^"
b0 ,#
b1 j
b1 \"
b1 *#
b0 x
b0 o"
b0 $#
b0 (#
b0 3#
b0 .#
b1 f
b1 ["
b1 C#
b0 e
b0 Z"
b0 B#
b0 F#
b0 p
b0 n"
b0 :#
b0 A#
b0 G#
b0 E#
b1100111 O#
b0 d
b0 Y"
b0 P#
b1000 Q#
b0 \#
b1 ^
b1 Z#
b0 ]
b0 Y#
b0 [#
b0 ]#
b1000000001100111 H
b1000000001100111 $"
b1000000001100111 r"
b1000000001100111 ~"
b1000000001100111 6#
b1000000001100111 I#
b1000000001100111 U#
b1000000001100111 /
b1000000001100111 Y
b1000000001100111 c#
b1000000001100111 a#
b1000 }
b1 b#
x"
b1000 [
b1000 &"
b1000 C"
b1000 /"
b1000000000000100 R
b1000000000000100 ~
b1000000000000100 )"
b1000 0#
b100 S
b100 !"
b100 -#
b100 0
b100 I
b100 `#
b100 U
b100 {
b100 %"
b100 !#
b100 J#
b100 #"
b110 {#
b1101100100 x#
b1x00 g#
b110 s#
b1101100100 p#
b100000 7"
b1 y
1#
#2
0#
b1 %
#3
bx 1#
bx '#
bx &#
bx i
bx i"
bx K#
bx =#
bx o
bx j"
bx 7#
bx %#
bx w
bx k"
bx "#
bx 2
bx Z
bx l"
bx i#
bx #$
bx n
bx m"
bx D#
bx @#
bx ?#
x$$
bx !$
bx "$
x,
xP
bx p"
bx t
bx W"
bx s"
bx 4#
bx h
bx S"
bx 8#
bx S#
bx `
bx O"
bx V#
bx M"
bx }"
bx k
bx U"
bx ##
bx b
bx Q"
bx u
bx a"
bx u"
bx |"
bx a
bx P"
xQ
bx O
bx 5"
bx K"
bx M
bx 0"
bx F"
bx K
bx 3"
bx I"
bx J
bx 2"
bx H"
bx q"
bx s
bx V"
bx t"
bx >#
bx 5#
bx g
bx R"
bx 9#
bx T#
bx _
bx N"
bx W#
bx L"
bx N
bx 4"
bx J"
bx 4
bx X
bx h"
bx |#
bx 1
bx W
bx g"
bx }#
bx 2#
bx c
bx X"
bx N#
bx R#
bx0 T
bx0 ""
bx0 X#
bx0 _#
bx V
bx z
bx 8"
bx c"
bx '"
bx \
bx ("
bx B"
x-"
bx ,"
x+"
bx *"
bx0 ."
bx v
bx b"
bx x"
bx r
bx `"
bx w"
bx q
bx _"
bx v"
bx {"
bx z"
bx y"
bx )#
bx m
bx ^"
bx ,#
bx /#
bx j
bx \"
bx *#
bx x
bx o"
bx $#
bx (#
b0xxxxxxxxxxxx 3#
bx .#
bx f
bx ["
bx C#
bx e
bx Z"
bx B#
bx F#
bx p
bx n"
bx :#
bx A#
bx G#
bx E#
bx H#
bx O#
bx d
bx Y"
bx P#
bx Q#
bx \#
bx ^#
bx ^
bx Z#
bx ]
bx Y#
bx [#
bx0 ]#
bx l
bx ]"
bx +#
bx H
bx $"
bx r"
bx ~"
bx 6#
bx I#
bx U#
bx /
bx Y
bx c#
bx a#
bx }
bx |
b10 b#
b1100 [
b1100 &"
b1100 C"
b1100 /"
bx R
bx ~
bx )"
b1100 0#
bx S
bx !"
bx -#
b1000 0
b1000 I
b1000 `#
b1000 U
b1000 {
b1000 %"
b1000 !#
b1000 J#
b1000 #"
b110110010 p#
bx T"
b100000 7"
bx L
bx 1"
bx G"
b10 y
1#
#4
0#
b10 %
#5
xd#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx b#
bx [
bx &"
bx C"
bx /"
bx 0#
bx 0
bx I
bx `#
bx U
bx {
bx %"
bx !#
bx J#
bx #"
b100000 7"
b11 y
1#
#6
0#
b11 %
#7
b100000 7"
b100 y
1#
#8
0#
b100 %
#9
b100000 7"
b101 y
1#
#10
0#
b101 %
#11
b100000 7"
b110 y
1#
#12
0#
b110 %
#13
b100000 7"
b111 y
1#
#14
0#
b111 %
#15
b100000 7"
b1000 y
1#
#16
0#
b1000 %
#17
b100000 7"
b1001 y
1#
#18
0#
b1001 %
#19
b100000 7"
b1010 y
1#
#20
b0 2
b0 Z
b0 l"
b0 i#
b0 #$
0$$
b0 !$
b11000000 "$
b1110001000 N
b1110001000 4"
b1110001000 J"
b1010 O
b1010 5"
b1010 K"
b0 &#
1,
1P
b0 n
b0 m"
b0 D#
b0 4
b0 X
b0 h"
b0 |#
b0 1
b0 W
b0 g"
b0 }#
b0 ?#
b1110001000 l
b1110001000 ]"
b1110001000 +#
b0 '#
b0 T"
0Q
b0 @#
b1110001000 2#
b0 L
b0 1"
b0 G"
b0 J
b0 2"
b0 H"
b0 %#
b0 w
b0 k"
b0 "#
b1110001000000000000000 S
b1110001000000000000000 !"
b1110001000000000000000 -#
b100 }
b0 u
b0 a"
b0 u"
b0 |"
b0 a
b0 P"
b0 i
b0 i"
b0 K#
b1110001000 x
b1110001000 o"
b1110001000 $#
b1110001000 (#
b0 }"
b0 k
b0 U"
b0 ##
b0 b
b0 Q"
b1110001000 R
b1110001000 ~
b1110001000 )"
b1110001010 p
b1110001010 n"
b1110001010 :#
b1110001010 A#
b0 |
b0 p"
b0 t
b0 W"
b0 s"
b0 4#
b0 h
b0 S"
b0 8#
b0 S#
b0 `
b0 O"
b0 V#
b0 M"
b0 q"
b0 s
b0 V"
b0 t"
b0 >#
b0 5#
b0 g
b0 R"
b0 9#
b0 T#
b0 _
b0 N"
b0 W#
b0 L"
b0 =#
b0 o
b0 j"
b0 7#
b0 M
b0 0"
b0 F"
b0 K
b0 3"
b0 I"
b0 1#
b0 c
b0 X"
b0 N#
b0 R#
b1110001010 T
b1110001010 ""
b1110001010 X#
b1110001010 _#
b10011 V
b10011 z
b10011 8"
b10011 c"
b10011 '"
b1010 \
b1010 ("
b1010 B"
0-"
b1010001001 ,"
0+"
b0 *"
b1110001000 ."
b1010 v
b1010 b"
b1010 x"
b0 r
b0 `"
b0 w"
b1000 q
b1000 _"
b1000 v"
b0 {"
b11100 z"
b11100 y"
b10011 )#
b1010 m
b1010 ^"
b1010 ,#
b0 /#
b0 j
b0 \"
b0 *#
b1110001000 3#
b1110001000 .#
b0 f
b0 ["
b0 C#
b1000 e
b1000 Z"
b1000 B#
b1010 F#
b1110001010 G#
b11100 E#
b0 H#
b10011 O#
b1010 d
b1010 Y"
b1010 P#
b111000100000000000 Q#
b1010 \#
b0 ^#
b0 ^
b0 Z#
b1000 ]
b1000 Y#
b11100 [#
b1110001010 ]#
1d#
b111000100000000000010100010011 H
b111000100000000000010100010011 $"
b111000100000000000010100010011 r"
b111000100000000000010100010011 ~"
b111000100000000000010100010011 6#
b111000100000000000010100010011 I#
b111000100000000000010100010011 U#
b111000100000000000010100010011 /
b111000100000000000010100010011 Y
b111000100000000000010100010011 c#
b111000100000000000010100010011 a#
b0 b#
b100 [
b100 &"
b100 C"
b100 /"
b100 0#
b0 0
b0 I
b0 `#
b0 U
b0 {
b0 %"
b0 !#
b0 J#
b0 #"
b100000 7"
0#
0)
0$
b1010 %
